// <auto-generated />
using System;
using BackEndService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BackEndService.Migrations
{
    [DbContext(typeof(LibraryManagementDb))]
    partial class LibraryManagementDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BackEndService.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a09b59e7-240c-4a28-919f-8a19dfc2a86e"),
                            Author = "Lev Tolstoy",
                            Description = "Lorem ipsum",
                            Price = 23.0,
                            Quantity = 30,
                            Title = "Anna Karenina"
                        },
                        new
                        {
                            Id = new Guid("9745f08c-4cbc-4888-a881-c890842e0ead"),
                            Author = "Gustav Flaubert",
                            Description = "Lorem ipsum",
                            Price = 30.0,
                            Quantity = 20,
                            Title = "Madame Bovary"
                        },
                        new
                        {
                            Id = new Guid("e25020c2-9175-4ec4-8cb8-dfa0e11686f8"),
                            Author = "Lev Tolstoy",
                            Description = "Lorem ipsum",
                            Price = 40.0,
                            Quantity = 12,
                            Title = "War and Peace"
                        });
                });

            modelBuilder.Entity("BackEndService.Models.BookStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("StudentId");

                    b.ToTable("BookStudents");
                });

            modelBuilder.Entity("BackEndService.Models.BoughtBooks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BoughtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("BoughtBooks");
                });

            modelBuilder.Entity("BackEndService.Models.Librarian", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Librarian");

                    b.HasData(
                        new
                        {
                            Id = new Guid("570fe434-6f20-44e2-83a8-84dec81b8108"),
                            FirstName = "Judit",
                            LastName = "Polgar",
                            Password = "Pass123",
                            PhoneNumber = "998973290312",
                            UserName = "judpl"
                        },
                        new
                        {
                            Id = new Guid("d1707dfc-85f9-4039-ac3a-0d1358554e46"),
                            FirstName = "Izabella",
                            LastName = "Dickson",
                            Password = "Izason11",
                            PhoneNumber = "998913845940",
                            UserName = "Iza"
                        });
                });

            modelBuilder.Entity("BackEndService.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Faculty")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8ba3b0b-9481-4ef4-883f-6df822b55884"),
                            Faculty = 5,
                            FirstName = "Paul",
                            LastName = "Walker",
                            PhoneNumber = "9982345678"
                        },
                        new
                        {
                            Id = new Guid("2ebec012-d020-43c0-b621-6092fc700312"),
                            Faculty = 3,
                            FirstName = "Dominik",
                            LastName = "Toretto",
                            PhoneNumber = "888892834769"
                        },
                        new
                        {
                            Id = new Guid("7fcf0586-0358-4638-91cd-147b1a014b05"),
                            Faculty = 2,
                            FirstName = "Pirc",
                            LastName = "Roman",
                            PhoneNumber = "998992349012"
                        });
                });

            modelBuilder.Entity("BookBoughtBooks", b =>
                {
                    b.Property<Guid>("BoughtBooksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("booksId")
                        .HasColumnType("uuid");

                    b.HasKey("BoughtBooksId", "booksId");

                    b.HasIndex("booksId");

                    b.ToTable("BookBoughtBooks");
                });

            modelBuilder.Entity("BoughtBooksStudent", b =>
                {
                    b.Property<Guid>("BoughtBooksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("studentsId")
                        .HasColumnType("uuid");

                    b.HasKey("BoughtBooksId", "studentsId");

                    b.HasIndex("studentsId");

                    b.ToTable("BoughtBooksStudent");
                });

            modelBuilder.Entity("BackEndService.Models.BookStudent", b =>
                {
                    b.HasOne("BackEndService.Models.Book", null)
                        .WithMany("BookStudents")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndService.Models.Student", null)
                        .WithMany("BookStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookBoughtBooks", b =>
                {
                    b.HasOne("BackEndService.Models.BoughtBooks", null)
                        .WithMany()
                        .HasForeignKey("BoughtBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndService.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("booksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoughtBooksStudent", b =>
                {
                    b.HasOne("BackEndService.Models.BoughtBooks", null)
                        .WithMany()
                        .HasForeignKey("BoughtBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndService.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("studentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndService.Models.Book", b =>
                {
                    b.Navigation("BookStudents");
                });

            modelBuilder.Entity("BackEndService.Models.Student", b =>
                {
                    b.Navigation("BookStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
