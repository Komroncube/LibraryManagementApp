// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using managementcheck.Data;

#nullable disable

namespace managementcheck.Migrations
{
    [DbContext(typeof(LibraryManagementDb))]
    [Migration("20230803131817_InitialMigrationl")]
    partial class InitialMigrationl
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("managementcheck.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("49eb1f21-cc89-427a-9611-feb264e4055a"),
                            Author = "Lev Tolstoy",
                            Description = "Lorem ipsum",
                            Price = 23.0,
                            Quantity = 30,
                            Title = "Anna Karenina"
                        },
                        new
                        {
                            Id = new Guid("e6267aaa-a321-43b0-a021-779789489b8f"),
                            Author = "Gustav Flaubert",
                            Description = "Lorem ipsum",
                            Price = 30.0,
                            Quantity = 20,
                            Title = "Madame Bovary"
                        });
                });

            modelBuilder.Entity("managementcheck.Models.BookStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("StudentId");

                    b.ToTable("BookStudents");
                });

            modelBuilder.Entity("managementcheck.Models.BoughtBooks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BoughtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("StudentId");

                    b.ToTable("BoughtBooks");
                });

            modelBuilder.Entity("managementcheck.Models.Librarian", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Librarian");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb2633d5-b064-4a24-b193-bc95fc702595"),
                            FirstName = "Judit",
                            LastName = "Polgar",
                            Password = "Pass123",
                            PhoneNumber = "998973290312",
                            UserName = "judpl"
                        },
                        new
                        {
                            Id = new Guid("d67b3d81-b3c7-499e-b026-c48af4e039f5"),
                            FirstName = "Izabella",
                            LastName = "Dickson",
                            Password = "Izason11",
                            PhoneNumber = "998913845940",
                            UserName = "Iza"
                        });
                });

            modelBuilder.Entity("managementcheck.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Faculty")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("92bb0fa8-4b24-4f68-993e-d8a3cdd70e9a"),
                            Faculty = 6,
                            FirstName = "Paul",
                            LastName = "Walker",
                            PhoneNumber = "9982345678"
                        },
                        new
                        {
                            Id = new Guid("a15d5783-4e91-4d41-bb77-ac603a08ac80"),
                            Faculty = 4,
                            FirstName = "Dominik",
                            LastName = "Toretto",
                            PhoneNumber = "888892834769"
                        },
                        new
                        {
                            Id = new Guid("8b1642e5-43fc-443c-9bbf-afbe7d502bd4"),
                            Faculty = 3,
                            FirstName = "Pirc",
                            LastName = "Roman",
                            PhoneNumber = "998992349012"
                        });
                });

            modelBuilder.Entity("managementcheck.Models.BookStudent", b =>
                {
                    b.HasOne("managementcheck.Models.Book", "Book")
                        .WithMany("BookStudents")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("managementcheck.Models.Student", "Student")
                        .WithMany("BookStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("managementcheck.Models.BoughtBooks", b =>
                {
                    b.HasOne("managementcheck.Models.Book", "Book")
                        .WithMany("BoughtBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("managementcheck.Models.Student", "Student")
                        .WithMany("BoughtBooks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("managementcheck.Models.Book", b =>
                {
                    b.Navigation("BookStudents");

                    b.Navigation("BoughtBooks");
                });

            modelBuilder.Entity("managementcheck.Models.Student", b =>
                {
                    b.Navigation("BookStudents");

                    b.Navigation("BoughtBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
